generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PROPERTY_MANAGER
  LANDLORD
  TENANT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role
  firstName String
  lastName  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  properties          Property[]           @relation("LandlordProperties")
  managedProperties   Property[]           @relation("ManagerProperties")
  tenantProfile       Tenant?
  maintenanceRequests MaintenanceRequest[]
  auditLogs           AuditLog[]
}

model Property {
  id         String   @id @default(cuid())
  name       String
  address    String
  city       String
  state      String
  zipCode    String
  landlordId String
  landlord   User     @relation("LandlordProperties", fields: [landlordId], references: [id])
  managerId  String?
  manager    User?    @relation("ManagerProperties", fields: [managerId], references: [id])
  units      Unit[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Unit {
  id                  String               @id @default(cuid())
  propertyId          String
  property            Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  unitNumber          String
  bedrooms            Int
  bathrooms           Float
  rentAmount          Float
  status              String               @default("available")
  leases              Lease[]
  maintenanceRequests MaintenanceRequest[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Tenant {
  id               String    @id @default(cuid())
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ssn              String?
  dob              DateTime?
  emergencyContact String?
  leases           Lease[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Lease {
  id              String    @id @default(cuid())
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unitId          String
  unit            Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  startDate       DateTime
  endDate         DateTime
  rentAmount      Float
  securityDeposit Float
  status          String    @default("active")
  payments        Payment[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Payment {
  id        String    @id @default(cuid())
  leaseId   String
  lease     Lease     @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  amount    Float
  dueDate   DateTime
  paidDate  DateTime?
  status    String    @default("pending")
  lateFee   Float     @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model MaintenanceRequest {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      User     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unitId      String
  unit        Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  description String
  status      String   @default("pending")
  priority    String   @default("medium")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  entity    String
  entityId  String
  details   String?
  createdAt DateTime @default(now())
}
